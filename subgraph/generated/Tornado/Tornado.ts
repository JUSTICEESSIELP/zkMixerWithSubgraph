// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get root(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get hashPairings(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get pairDirection(): Array<i32> {
    return this._event.parameters[2].value.toI32Array();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nullifierHash(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Tornado extends ethereum.SmartContract {
  static bind(address: Address): Tornado {
    return new Tornado("Tornado", address);
  }

  commitments(param0: BigInt): boolean {
    let result = super.call("commitments", "commitments(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_commitments(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("commitments", "commitments(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  denomination(): BigInt {
    let result = super.call("denomination", "denomination():(uint256)", []);

    return result[0].toBigInt();
  }

  try_denomination(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("denomination", "denomination():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextLeafIdx(): BigInt {
    let result = super.call("nextLeafIdx", "nextLeafIdx():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextLeafIdx(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextLeafIdx", "nextLeafIdx():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nullifierHashes(param0: BigInt): boolean {
    let result = super.call(
      "nullifierHashes",
      "nullifierHashes(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_nullifierHashes(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "nullifierHashes",
      "nullifierHashes(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roots(param0: BigInt): boolean {
    let result = super.call("roots", "roots(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_roots(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("roots", "roots(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  treeLevel(): i32 {
    let result = super.call("treeLevel", "treeLevel():(uint8)", []);

    return result[0].toI32();
  }

  try_treeLevel(): ethereum.CallResult<i32> {
    let result = super.tryCall("treeLevel", "treeLevel():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _hasher(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _verifier(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _commitment(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get a(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get b(): Array<Array<BigInt>> {
    return this._call.inputValues[1].value.toBigIntMatrix();
  }

  get c(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get input(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
