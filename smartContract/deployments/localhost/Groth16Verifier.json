{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[3]",
          "name": "_pubSignals",
          "type": "uint256[3]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d296a68b4a7c0b4a9c3727b59cd7df76377106d1818a28e38fe86ff9e9bb26f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "428014",
    "logsBloom": "0x
    "blockHash": "0x9bef1cb5f96dc4175758d0c7812fdad8a2080f44721402a5e2c827c02993e108",
    "transactionHash": "0x0d296a68b4a7c0b4a9c3727b59cd7df76377106d1818a28e38fe86ff9e9bb26f",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "428014",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "39945036376eb1a72f20cccc7a9e2de8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_pubSignals\",\"type\":\"uint256[3]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifier.sol\":\"Groth16Verifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 9195021042278933172446394421702167244346965218605255476921164112659251221177;\\n    uint256 constant alphay  = 8792598133334715920827793834737610834578165727778706356132097993397125851658;\\n    uint256 constant betax1  = 12476991183148770300351888235570482037418733163750405863789266190447327896927;\\n    uint256 constant betax2  = 4588672682928019373349957372861494288556632204327008441817526221020130074929;\\n    uint256 constant betay1  = 14024654644845092316465499011272539865139994325250861083683336349285038848561;\\n    uint256 constant betay2  = 15111774571023661616595270291541169401803017898425572126574777727143833318000;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\n    \\n    uint256 constant IC0x = 2502289850785184832398231181860575906101366558163247819982056700872724005819;\\n    uint256 constant IC0y = 11810736046499745167467151923448079594910388883754528171799411217130825486960;\\n    \\n    uint256 constant IC1x = 3926701609347900553451620007425605819973532511543666607677996535979450810338;\\n    uint256 constant IC1y = 14920695973032794844783916876804221455971927353968895375656317332127107336370;\\n    \\n    uint256 constant IC2x = 401512696046823088707567146838901994469375655734506155894185681310389735657;\\n    uint256 constant IC2y = 14591437697752340132545167804359733167356788427604185413243854698994364648137;\\n    \\n    uint256 constant IC3x = 11481486560255105223028234270925329389916398961213491329367211906251860778680;\\n    uint256 constant IC3y = 21812657173593168717063609204086076684196503874610814935269463151047723036251;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[3] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                \\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n            checkField(calldataload(add(_pubSignals, 64)))\\n            \\n            checkField(calldataload(add(_pubSignals, 96)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0x04a25f7ca2cfc3e9c4fb749bc357710b0cc94110f0182ab3baada2c7b9953c5e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506106c7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806311479fea14610030575b600080fd5b61004a600480360381019061004591906105f2565b610060565b6040516100579190610676565b60405180910390f35b600061052c565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f05883ef10da86c2e5d99b7aae5d194bb58f47eb149f279fd0394d19193a343bb81527f1a1ca3c3e0d35965428a4ce87ec5c48ffd84cd91ecfbe002f57fb1328664927060208201526101a960008801357f20fcd08cc1d17d9824a61f9a710b9b387778d5641117abc055869294d3ad48b27f08ae6f319cf26fc4973a10c00bef737b2395e27eb99669365a359388bfe3bfe28461009b565b6101f860208801357f204276088f0a6dad779201d6fa3a4dc8083b638edf7a8ba6688dd0a282090ac97ee33f859e1863b11250e2a821300439025ba7e08f7ebee9824d35fc874d90e98461009b565b61024860408801357f303986c582e32bdfded95b9d866b83f4f732304c5be11694a814bf3ec955ae5b7f19624a85aeeed8c69590cccd7758b784a8b4fe76bb10f4382043348c2ad49eb88461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f1454328e0ea58003b612bab4ac72c8f2aefe458b68c46fefc33a5447651452b960c08301527f13706f26c452294f4578c64bc222ed1e6ef4ca79c77cd3e19741098272152a0a60e08301527f1b95ba0c62d63c00c6c864e951bc1a0a597f6ec1c062df40aede6751b928e55f6101008301527f0a2518c163dc41e86ed37a4fc43f45af6377c3be48d348bdcc565bc4e9f661316101208301527f1f01ac58b302eb61f75e5af674e9e19250f1e43fba4f521fce386a7399de7a316101408301527f2168f617ddce2eb649af639011c7fff7d68c1dcc4d4d1e0d1367ae0bc5553270610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102c08301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526105446000840135610067565b6105516020840135610067565b61055e6040840135610067565b61056b6060840135610067565b610578818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156105a8576105a7610587565b5b92915050565b6000819050826040600202820111156105ca576105c9610587565b5b92915050565b6000819050826020600302820111156105ec576105eb610587565b5b92915050565b600080600080610160858703121561060d5761060c610582565b5b600061061b8782880161058c565b945050604061062c878288016105ae565b93505060c061063d8782880161058c565b92505061010061064f878288016105d0565b91505092959194509250565b60008115159050919050565b6106708161065b565b82525050565b600060208201905061068b6000830184610667565b9291505056fea26469706673582212203ddaffefe329df4dee05db4b9f17977067083fb86d3f4e48f4eadebe968b5f6464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806311479fea14610030575b600080fd5b61004a600480360381019061004591906105f2565b610060565b6040516100579190610676565b60405180910390f35b600061052c565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f05883ef10da86c2e5d99b7aae5d194bb58f47eb149f279fd0394d19193a343bb81527f1a1ca3c3e0d35965428a4ce87ec5c48ffd84cd91ecfbe002f57fb1328664927060208201526101a960008801357f20fcd08cc1d17d9824a61f9a710b9b387778d5641117abc055869294d3ad48b27f08ae6f319cf26fc4973a10c00bef737b2395e27eb99669365a359388bfe3bfe28461009b565b6101f860208801357f204276088f0a6dad779201d6fa3a4dc8083b638edf7a8ba6688dd0a282090ac97ee33f859e1863b11250e2a821300439025ba7e08f7ebee9824d35fc874d90e98461009b565b61024860408801357f303986c582e32bdfded95b9d866b83f4f732304c5be11694a814bf3ec955ae5b7f19624a85aeeed8c69590cccd7758b784a8b4fe76bb10f4382043348c2ad49eb88461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f1454328e0ea58003b612bab4ac72c8f2aefe458b68c46fefc33a5447651452b960c08301527f13706f26c452294f4578c64bc222ed1e6ef4ca79c77cd3e19741098272152a0a60e08301527f1b95ba0c62d63c00c6c864e951bc1a0a597f6ec1c062df40aede6751b928e55f6101008301527f0a2518c163dc41e86ed37a4fc43f45af6377c3be48d348bdcc565bc4e9f661316101208301527f1f01ac58b302eb61f75e5af674e9e19250f1e43fba4f521fce386a7399de7a316101408301527f2168f617ddce2eb649af639011c7fff7d68c1dcc4d4d1e0d1367ae0bc5553270610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102c08301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526105446000840135610067565b6105516020840135610067565b61055e6040840135610067565b61056b6060840135610067565b610578818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156105a8576105a7610587565b5b92915050565b6000819050826040600202820111156105ca576105c9610587565b5b92915050565b6000819050826020600302820111156105ec576105eb610587565b5b92915050565b600080600080610160858703121561060d5761060c610582565b5b600061061b8782880161058c565b945050604061062c878288016105ae565b93505060c061063d8782880161058c565b92505061010061064f878288016105d0565b91505092959194509250565b60008115159050919050565b6106708161065b565b82525050565b600060208201905061068b6000830184610667565b9291505056fea26469706673582212203ddaffefe329df4dee05db4b9f17977067083fb86d3f4e48f4eadebe968b5f6464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}