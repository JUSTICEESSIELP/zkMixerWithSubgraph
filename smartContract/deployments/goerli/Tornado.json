{
  "address": "0x961590C3D9BefbBff61fe5D711684216E3d5E7dd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[10]",
          "name": "hashPairings",
          "type": "uint256[10]"
        },
        {
          "indexed": false,
          "internalType": "uint8[10]",
          "name": "pairDirection",
          "type": "uint8[10]"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denomination",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_commitment",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextLeafIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nullifierHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treeLevel",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "input",
          "type": "uint256[2]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x799a269bcc4dbe40fc8e3bca7a847f29e143abe175ec9597c34fbdeca8604047",
  "receipt": {
    "to": null,
    "from": "0xde358FCcA54Fa226aE16Ac3927487260dAfc3835",
    "contractAddress": "0x961590C3D9BefbBff61fe5D711684216E3d5E7dd",
    "transactionIndex": 5,
    "gasUsed": "1835481",
    "logsBloom": "0x
    "blockHash": "0xdbdcfc2580cd0304d45b71c2b0c8170899a7c6c22beabf0eefd5b8a8795bfd97",
    "transactionHash": "0x799a269bcc4dbe40fc8e3bca7a847f29e143abe175ec9597c34fbdeca8604047",
    "logs": [],
    "blockNumber": 10578946,
    "cumulativeGasUsed": "9587922",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x36F008A23F8A7EDeF632EFb33a851795b7A37e45",
    "0xb88EB8F29b5A0Dfd1aFDe5B1904020345501408E"
  ],
  "numDeployments": 1,
  "solcInputHash": "39945036376eb1a72f20cccc7a9e2de8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[10]\",\"name\":\"hashPairings\",\"type\":\"uint256[10]\"},{\"indexed\":false,\"internalType\":\"uint8[10]\",\"name\":\"pairDirection\",\"type\":\"uint8[10]\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denomination\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commitment\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextLeafIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nullifierHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treeLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"input\",\"type\":\"uint256[2]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Tornado.sol\":\"Tornado\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/MiMCSponge.sol\":{\"content\":\"// // SPDX-License-Identifier: UNLICENSED\\r\\n// pragma solidity =0.8.17;\\r\\n\\r\\n\\r\\n// import \\\"./interfaces/IMiMCSponge.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n// // we are implementing the MIMCSponge; \\r\\n// contract HasherSponge is IMiMCSponge {\\r\\n\\r\\n \\r\\n     \\r\\n\\r\\n//     uint8  private nRounds = 20;\\r\\n//     // the prime field from \\r\\n//     uint256 p = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\r\\n\\r\\n\\r\\n//     // so the first thing we have to do is we need to have the c .. the constants \\r\\n//     // c is the constant for the MIMC\\r\\n\\r\\n//     uint256[20] private c  = [\\r\\n         \\r\\n//         0,\\r\\n//         50281665087298506398025612566576429713867677490132600550666462694043893096041,\\r\\n//         103379909872542805421140796569816612169295853039398864686417708805632325131067,\\r\\n//         8586855295369424941935330807803134896681691157372145643883923355615550583342,\\r\\n//         88370656788028663357054378704610607924064488825154270360610943785853808437587,\\r\\n//         80176421270384287601374674158600932358010734845730789240551909743287128659181,\\r\\n//         9528216501708403574105991674956722258584542856277612000094300594947363066680,\\r\\n//         17669521326439010530034895428020811097501471394802251414069319741829373029771,\\r\\n//         58631108220768371139580724699814589444344114830955946945895965299721834508558,\\r\\n//         95100372926602787001593384948116402864394899303403306696193376400358861223081,\\r\\n//         107818123855601272583072257161782347474009303555329756033680199767831149000646,\\r\\n//         1428802693023461914036224180230354801713259560901182204682110762944690749665,\\r\\n//         98212930817416947604707053186021029626372029290120295000826942586189933631243,\\r\\n//         77616516200106068767337201799487094912595296259220362763818164121851717084940,\\r\\n//         58083512051912905109576180677305052842815684860310822645756294409625272816797,\\r\\n//         105110014696781952118374891655100624045293309813267472668843831137609860690906,\\r\\n//         63510890172120891876331835536756515461281359754185699836571235972391984807120,\\r\\n//         71776992183853185402707224684473119966100872667793758637767495260560955881686,\\r\\n//         38521477329328306708598228213328859227759684577497015037882397799544926522561,\\r\\n//         26398687503444292499683437635338801937597812449300890475753400819372208451565\\r\\n\\r\\n\\r\\n    \\r\\n//     ];\\r\\n\\r\\n\\r\\n\\r\\n \\r\\n// function createNewHashFromTwo( uint256[2] memory inputs,  uint256 k) public view  returns(uint256){\\r\\n\\r\\n  \\r\\n\\r\\n\\r\\n//     uint256 rBits = 0;\\r\\n//     uint256 cBits = 0;\\r\\n\\r\\n//     for (uint256 i = 0; i<inputs.length; i++){\\r\\n               \\r\\n//          rBits =  addmod(rBits, inputs[i] , p);\\r\\n\\r\\n//             (rBits, cBits) = mimcHasherFeistal(rBits, cBits, k);\\r\\n\\r\\n\\r\\n\\r\\n//     }\\r\\n     \\r\\n//     return rBits;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n// }\\r\\n\\r\\n//   // lets create the function MIMC = (x + k + c) ^5 but for each roun\\r\\n// function mimcHasherFeistal(uint256 _iL, uint256 _iR, uint256 k) public  view returns(uint256, uint256){\\r\\n//           uint256 lastR = _iR;\\r\\n//           uint256 lastL = _iL;\\r\\n       \\r\\n\\r\\n//           uint base;\\r\\n//           uint base2;\\r\\n//           uint256 base4;\\r\\n//           uint256 temp;\\r\\n \\r\\n          \\r\\n          \\r\\n//           for (uint256 i = 0; i< nRounds; i++){\\r\\n//             // x + k+  c\\r\\n//             // at index 0    c = 0 \\r\\n//             base = addmod(lastR, k, p );\\r\\n//             base = addmod(base , c[i],p);\\r\\n//             base2 = mulmod(base, base, p);\\r\\n//             base4 = mulmod(base2, base2, p);\\r\\n           \\r\\n\\r\\n//             temp = lastR;\\r\\n\\r\\n//             lastR =  addmod(mulmod(base4, base2, p), lastL, p );\\r\\n//             lastL = temp;\\r\\n\\r\\n                  \\r\\n//           }\\r\\n\\r\\n//           return (lastL, lastR);\\r\\n\\r\\n\\r\\n\\r\\n    \\r\\n// }\\r\\n\\r\\n\\r\\n\\r\\n// }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\npragma solidity =0.8.17;\\r\\n\\r\\ncontract Hasher {\\r\\n    uint256 p = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\r\\n    uint256[20] c = [\\r\\n        0,\\r\\n        25823191961023811529686723375255045606187170120624741056268890390838310270028,\\r\\n        71153255768872006974285801937521995907343848376936063113800887806988124358800,\\r\\n        51253176922899201987938365653129780755804051536550826601168630951148399005246,\\r\\n        66651710483985382365580181188706173532487386392003341306307921015066514594406,\\r\\n        45887003413921204775397977044284378920236104620216194900669591190628189327887,\\r\\n        14399999722617037892747232478295923748665564430258345135947757381904956977453,\\r\\n        29376176727758177809204424209125257629638239807319618360680345079470240949145,\\r\\n        13768859312518298840937540532277016512087005174650120937309279832230513110846,\\r\\n        54749662990362840569021981534456448557155682756506853240029023635346061661615,\\r\\n        25161436470718351277017231215227846535148280460947816286575563945185127975034,\\r\\n        90370030464179443930112165274275271350651484239155016554738639197417116558730,\\r\\n        92014788260850167582827910417652439562305280453223492851660096740204889381255,\\r\\n        40376490640073034398204558905403523738912091909516510156577526370637723469243,\\r\\n        903792244391531377123276432892896247924738784402045372115602887103675299839,\\r\\n        112203415202699791888928570309186854585561656615192232544262649073999791317171,\\r\\n        114801681136748880679062548782792743842998635558909635247841799223004802934045,\\r\\n        111440818948676816539978930514468038603327388809824089593328295503672011604028,\\r\\n        64965960071752809090438003157362764845283225351402746675238539375404528707397,\\r\\n        98428510787134995495896453413714864789970336245473413374424598985988309743097\\r\\n    ];\\r\\n\\r\\n    function MiMC5Feistel(uint256 _iL, uint256 _iR, uint256 _k) internal view returns(uint256 oL, uint256 oR) {\\r\\n        uint8 nRounds = 20;\\r\\n\\r\\n        uint256 lastL = _iL;\\r\\n        uint256 lastR = _iR;\\r\\n\\r\\n        uint256 mask;\\r\\n        uint256 mask2;\\r\\n        uint256 mask4;\\r\\n        uint256 temp;\\r\\n\\r\\n        for(uint8 i = 0; i < nRounds; i++){\\r\\n            mask = addmod(lastR, _k, p);\\r\\n            mask = addmod(mask, c[i], p);\\r\\n            mask2 = mulmod(mask, mask, p);\\r\\n            mask4 = mulmod(mask2, mask2, p);\\r\\n            mask = mulmod(mask4, mask, p);\\r\\n\\r\\n            temp = lastR;\\r\\n            lastR = addmod(lastL, mask, p);\\r\\n            lastL = temp;\\r\\n        }\\r\\n\\r\\n        return (lastL, lastR);\\r\\n    }\\r\\n    function MiMC5Sponge(uint256[2] memory _ins, uint256 _k) external view returns(uint256 h) {\\r\\n        uint256 lastR = 0;\\r\\n        uint256 lastC = 0;\\r\\n\\r\\n        for(uint8 i = 0; i < _ins.length; i++){\\r\\n            lastR = addmod(lastR, _ins[i], p);\\r\\n            (lastR, lastC) = MiMC5Feistel(lastR, lastC, _k);\\r\\n        }\\r\\n\\r\\n        h = lastR;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x011be4e70d97d6dcc7e3e0f42806613a3f7fed035c34418ff56a9dc6c252c7b3\",\"license\":\"UNLICENSED\"},\"contracts/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\r\\n     * `nonReentrant` function in the call stack.\\r\\n     */\\r\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\r\\n        return _status == _ENTERED;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7836206f3f9d1fcd2269b5682f615d60380bbaf70c09c061d18f3210804fd659\",\"license\":\"MIT\"},\"contracts/Tornado.sol\":{\"content\":\"// // SPDX-License-Identifier: UNLICENSED\\r\\n// pragma solidity =0.8.17;\\r\\n\\r\\n\\r\\n// import \\\"./Reentrancy.sol\\\";\\r\\n// import \\\"./MiMCSponge.sol\\\";\\r\\n// import \\\"./interfaces/IMiMCSponge.sol\\\";\\r\\n\\r\\n// contract Tornado is ReentrancyGuard {\\r\\n\\r\\n//      IMiMCSponge mimcSponge;\\r\\n//     constructor(address spongeContractAddress){\\r\\n//         mimcSponge = IMiMCSponge(spongeContractAddress);\\r\\n//     }\\r\\n\\r\\n// event Deposit(   uint256[10]  hashDirections,\\r\\n//         uint256[10]  hashPairings, uint256 rootHash);\\r\\n\\r\\n//     uint8 treeHeight = 10;\\r\\n//     mapping(uint256 => bool) commitments;\\r\\n//     mapping(uint256 => bool) allRoots;\\r\\n\\r\\n//     mapping(uint256 => uint256) lastLevelhash;\\r\\n\\r\\n//     // we are going to use this to track each and every leafIndex to know if the merkle tree is full cause  if this is >= to the 2^ of the treeHeight then the merkle tree is full\\r\\n  \\r\\n\\r\\n//     uint256[10] private levelDefaults = [\\r\\n//         23183772226880328093887215408966704399401918833188238128725944610428185466379,\\r\\n//         24000819369602093814416139508614852491908395579435466932859056804037806454973,\\r\\n//         90767735163385213280029221395007952082767922246267858237072012090673396196740,\\r\\n//         36838446922933702266161394000006956756061899673576454513992013853093276527813,\\r\\n//         68942419351509126448570740374747181965696714458775214939345221885282113404505,\\r\\n//         50082386515045053504076326033442809551011315580267173564563197889162423619623,\\r\\n//         73182421758286469310850848737411980736456210038565066977682644585724928397862,\\r\\n//         60176431197461170637692882955627917456800648458772472331451918908568455016445,\\r\\n//         105740430515862457360623134126179561153993738774115400861400649215360807197726,\\r\\n//         76840483767501885884368002925517179365815019383466879774586151314479309584255\\r\\n//     ];\\r\\n\\r\\n\\r\\n\\r\\n//     function deposit(uint256 commitmentHash) public  payable nonReentrant(){\\r\\n//         uint256 leafIndex = 0;\\r\\n    \\r\\n//         uint256[10] memory hashDirections;\\r\\n//         uint256[10] memory hashPairings;\\r\\n//         uint256  leftPair;\\r\\n//         uint256 rightPair;\\r\\n\\r\\n//         uint256[2] memory _insForMimC;\\r\\n\\r\\n//         uint256 currenthash = commitmentHash;\\r\\n\\r\\n        \\r\\n//            uint256 currentIdx = leafIndex;\\r\\n           \\r\\n//         require(msg.value > 0, \\\"you need to deposit more than 0 eth\\\");\\r\\n\\r\\n//                 // we check if the merkle tree is full   2 ^height of the tree tell us the size of the merkle tree\\r\\n//         // we need to place the commitment hash into the tree \\r\\n//         require(leafIndex < 2**treeHeight, \\\"tree is full cannot make a deposit\\\");\\r\\n\\r\\n//         // we need to check commitment hash exist cause we cannot repeat two deposits \\r\\n\\r\\n//         require(!commitments[commitmentHash], \\\"duplicates are not allowed \\\");\\r\\n        \\r\\n//         for (uint8 i = 0 ; i< treeHeight ; i++){\\r\\n\\r\\n   \\r\\n\\r\\n\\r\\n\\r\\n// // this means that are on the left \\r\\n//             if (currentIdx %2 == 0){\\r\\n//                 leftPair = currenthash;\\r\\n//                 rightPair = levelDefaults[i];\\r\\n//                 hashDirections[i] = 0;\\r\\n//                 hashPairings[i] = levelDefaults[i];\\r\\n\\r\\n\\r\\n//             }else{\\r\\n\\r\\n\\r\\n//                     leftPair = levelDefaults[i];\\r\\n//                    rightPair = currenthash;\\r\\n//                     hashDirections[i] = 1;\\r\\n//                     hashPairings[i] = lastLevelhash[i];\\r\\n//             }\\r\\n\\r\\n//             lastLevelhash[i] = currenthash;\\r\\n\\r\\n//              _insForMimC[0] = leftPair;\\r\\n//              _insForMimC[1] = rightPair;\\r\\n//             (uint256 h) = mimcSponge.createNewHashFromTwo{value:150000}(_insForMimC, commitmentHash);\\r\\n\\r\\n//             currenthash = h;\\r\\n//             currentIdx =  currentIdx/2;\\r\\n            \\r\\n\\r\\n\\r\\n//         }\\r\\n\\r\\n//         uint256 newRoot = currenthash;\\r\\n//         allRoots[newRoot] = true;\\r\\n\\r\\n       \\r\\n\\r\\n//         leafIndex = leafIndex + 1;\\r\\n//         commitments[commitmentHash] = true;\\r\\n\\r\\n//         emit Deposit(hashDirections, hashPairings, newRoot);\\r\\n\\r\\n\\r\\n//         // after we deposit to the leaf we need to get the path of the merkle tree to the node \\r\\n\\r\\n\\r\\n       \\r\\n\\r\\n        \\r\\n\\r\\n\\r\\n//     }\\r\\n\\r\\n\\r\\n//     function withdraw() public nonReentrant() {\\r\\n\\r\\n//     }\\r\\n// }\\r\\n\\r\\n\\r\\npragma solidity =0.8.17;\\r\\n\\r\\nimport \\\"./MiMCSponge.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\n\\r\\ninterface IVerifier {\\r\\n    function verifyProof(uint[2] memory a, uint[2][2] memory b, uint[2] memory c, uint[3] memory input) external;\\r\\n}\\r\\n\\r\\ncontract Tornado is ReentrancyGuard {\\r\\n    // address verifier;\\r\\n    Hasher hasher;\\r\\n    address verifier;\\r\\n\\r\\n    uint8 public treeLevel = 10;\\r\\n    uint256 public denomination = 1 ether;\\r\\n\\r\\n    uint256 public nextLeafIdx = 0;\\r\\n    mapping(uint256 => bool) public roots;\\r\\n    mapping(uint8 => uint256) lastLevelHash;\\r\\n    mapping(uint256 => bool) public nullifierHashes;\\r\\n    mapping(uint256 => bool) public commitments;\\r\\n    \\r\\n    uint256[10] levelDefaults = [\\r\\n        23183772226880328093887215408966704399401918833188238128725944610428185466379,\\r\\n        24000819369602093814416139508614852491908395579435466932859056804037806454973,\\r\\n        90767735163385213280029221395007952082767922246267858237072012090673396196740,\\r\\n        36838446922933702266161394000006956756061899673576454513992013853093276527813,\\r\\n        68942419351509126448570740374747181965696714458775214939345221885282113404505,\\r\\n        50082386515045053504076326033442809551011315580267173564563197889162423619623,\\r\\n        73182421758286469310850848737411980736456210038565066977682644585724928397862,\\r\\n        60176431197461170637692882955627917456800648458772472331451918908568455016445,\\r\\n        105740430515862457360623134126179561153993738774115400861400649215360807197726,\\r\\n        76840483767501885884368002925517179365815019383466879774586151314479309584255\\r\\n    ];\\r\\n\\r\\n    event Deposit(uint256 root, uint256[10] hashPairings, uint8[10] pairDirection);\\r\\n    event Withdrawal(address to, uint256 nullifierHash);\\r\\n\\r\\n    constructor(\\r\\n        address _hasher,\\r\\n        address _verifier\\r\\n      \\r\\n    ){\\r\\n        hasher = Hasher(_hasher);\\r\\n        verifier = _verifier;\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _commitment) external payable nonReentrant {\\r\\n        require(msg.value == denomination, \\\"increatese the amount of eth\\\");\\r\\n        require(!commitments[_commitment], \\\"existing-commitment\\\");\\r\\n        require(nextLeafIdx < 2 ** treeLevel, \\\"tree-full\\\");\\r\\n\\r\\n        uint256 newRoot;\\r\\n        uint256[10] memory hashPairings;\\r\\n        uint8[10] memory hashDirections;\\r\\n\\r\\n        uint256 currentIdx = nextLeafIdx;\\r\\n        uint256 currentHash = _commitment;\\r\\n\\r\\n        uint256 left;\\r\\n        uint256 right;\\r\\n        uint256[2] memory ins;\\r\\n        \\r\\n        for(uint8 i = 0; i < treeLevel; i++){\\r\\n            \\r\\n            if(currentIdx % 2 == 0){\\r\\n                left = currentHash;\\r\\n                right = levelDefaults[i];\\r\\n                hashPairings[i] = levelDefaults[i];\\r\\n                hashDirections[i] = 0;\\r\\n            }else{\\r\\n                left = lastLevelHash[i];\\r\\n                right = currentHash;\\r\\n                hashPairings[i] = lastLevelHash[i];\\r\\n                hashDirections[i] = 1;\\r\\n            }\\r\\n            lastLevelHash[i] = currentHash;\\r\\n\\r\\n            ins[0] = left;\\r\\n            ins[1] = right;\\r\\n\\r\\n            (uint256 h) = hasher.MiMC5Sponge{ gas: 150000 }(ins, _commitment);\\r\\n\\r\\n            currentHash = h;\\r\\n            currentIdx = currentIdx / 2;\\r\\n        }\\r\\n\\r\\n        newRoot = currentHash;\\r\\n        roots[newRoot] = true;\\r\\n        nextLeafIdx += 1;\\r\\n\\r\\n        commitments[_commitment] = true;\\r\\n        emit Deposit(newRoot, hashPairings, hashDirections);\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        uint[2] memory a,\\r\\n        uint[2][2] memory b,\\r\\n        uint[2] memory c,\\r\\n        uint[2] memory input\\r\\n    ) external payable nonReentrant {\\r\\n        uint256 _root = input[0];\\r\\n        uint256 _nullifierHash = input[1];\\r\\n\\r\\n        require(!nullifierHashes[_nullifierHash], \\\"already-spent\\\");\\r\\n        require(roots[_root], \\\"not-root\\\");\\r\\n\\r\\n        uint256 _addr = uint256(uint160(msg.sender));\\r\\n\\r\\n        (bool verifyOK, ) = verifier.call(abi.encodeCall(IVerifier.verifyProof, (a, b, c, [_root, _nullifierHash, _addr])));\\r\\n\\r\\n        require(verifyOK, \\\"invalid-proof\\\");\\r\\n\\r\\n        nullifierHashes[_nullifierHash] = true;\\r\\n        address payable target = payable(msg.sender);\\r\\n\\r\\n        (bool ok, ) = target.call{ value: denomination }(\\\"\\\");\\r\\n\\r\\n        require(ok, \\\"payment-failed\\\");\\r\\n\\r\\n        emit Withdrawal(msg.sender, _nullifierHash);\\r\\n    }\\r\\n                \\r\\n}\",\"keccak256\":\"0xe7d93e794a6435859b4ebfcf35e7ebfb40a79586ec7f16b22b24152100b788ba\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080604052600a600260146101000a81548160ff021916908360ff160217905550670de0b6b3a764000060035560006004556040518061014001604052807f33418cd1669b4e7f4bf473ec2db9a489b3d6f9f11b91d0b3b6004432ab53d60b81526020017f350ffb7c45ccf8940c163b192252495b614def57272b6f8d9a53a5b3e44ef8bd81526020017fc8acb7af851baf91a82b1ad46b01ac506ce80387170890dea377d21e8520258481526020017f5171d273154b2764aa5903210e16bd1899b18648d1358d41887a113227e9acc581526020017f986c06cb04d613f57cf7a1da410e0f22c794e1ec1ae125898cfc9662a5e5be5981526020017f6eb9a05106eff3031621027680204b2e9326b0e5191bd62f3cd7bf7f6d94d02781526020017fa1cbc8691493398c061f547b4882edbb6a38ce1730c8a2605e9d8138d4ad122681526020017f850aa72f3d8bc65181e9c29d76f7614e2f939ade9442abac29fc8a0329deeffd81526020017fe9c6f678752dbfc89028bf8b9b1cce608b34b742b75fbae878ec2c6ae803dc1e81526020017fa9e22c2e1f4531bc4389032bb472b97c25a7298d27ba4fefd75439a1be46f77f815250600990600a620001c99291906200028f565b50348015620001d757600080fd5b5060405162001e1b38038062001e1b8339818101604052810190620001fd91906200035d565b600160008190555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620003a4565b82600a8101928215620002c1579160200282015b82811115620002c0578251825591602001919060010190620002a3565b5b509050620002d09190620002d4565b5090565b5b80821115620002ef576000816000905550600101620002d5565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200032582620002f8565b9050919050565b620003378162000318565b81146200034357600080fd5b50565b60008151905062000357816200032c565b92915050565b60008060408385031215620003775762000376620002f3565b5b6000620003878582860162000346565b92505060206200039a8582860162000346565b9150509250929050565b611a6780620003b46000396000f3fe60806040526004361061007b5760003560e01c8063b6b55f251161004e578063b6b55f2514610150578063b8e795641461016c578063c2b40ae414610197578063c78784d7146101d45761007b565b80631f79a1e91461008057806345e0523f146100bd57806349ce8997146100e85780638bca6d1614610125575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610b5d565b6101f0565b6040516100b49190610ba5565b60405180910390f35b3480156100c957600080fd5b506100d2610210565b6040516100df9190610bcf565b60405180910390f35b3480156100f457600080fd5b5061010f600480360381019061010a9190610b5d565b610216565b60405161011c9190610ba5565b60405180910390f35b34801561013157600080fd5b5061013a610236565b6040516101479190610bcf565b60405180910390f35b61016a60048036038101906101659190610b5d565b61023c565b005b34801561017857600080fd5b50610181610696565b60405161018e9190610c06565b60405180910390f35b3480156101a357600080fd5b506101be60048036038101906101b99190610b5d565b6106a9565b6040516101cb9190610ba5565b60405180910390f35b6101ee60048036038101906101e99190610e19565b6106c9565b005b60076020528060005260406000206000915054906101000a900460ff1681565b60045481565b60086020528060005260406000206000915054906101000a900460ff1681565b60035481565b610244610a57565b6003543414610288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027f90610edf565b60405180910390fd5b6008600082815260200190815260200160002060009054906101000a900460ff16156102e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e090610f4b565b60405180910390fd5b600260149054906101000a900460ff16600261030591906110cd565b60045410610348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033f90611164565b60405180910390fd5b6000610352610ab0565b61035a610ad3565b600060045490506000859050600080610371610af6565b60005b600260149054906101000a900460ff1660ff168160ff1610156105d25760006002876103a091906111b3565b036104295784935060098160ff16600a81106103bf576103be6111e4565b5b0154925060098160ff16600a81106103da576103d96111e4565b5b0154888260ff16600a81106103f2576103f16111e4565b5b6020020181815250506000878260ff16600a8110610413576104126111e4565b5b602002019060ff16908160ff16815250506104ab565b600660008260ff1660ff168152602001908152602001600020549350849250600660008260ff1660ff16815260200190815260200160002054888260ff16600a8110610478576104776111e4565b5b6020020181815250506001878260ff16600a8110610499576104986111e4565b5b602002019060ff16908160ff16815250505b84600660008360ff1660ff1681526020019081526020016000208190555083826000600281106104de576104dd6111e4565b5b60200201818152505082826001600281106104fc576104fb6111e4565b5b6020020181815250506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d622e5a4620249f0858e6040518463ffffffff1660e01b81526004016105689291906112be565b6020604051808303818786fa158015610585573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906105aa91906112fc565b90508095506002876105bc9190611329565b96505080806105ca9061135a565b915050610374565b508397506001600560008a815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600460008282546106159190611383565b925050819055506001600860008b815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe6ab8667cb740d6c65a4ad321c031eb42f6c5085d5753238d1b2e1e370c1348388888860405161067b939291906114e6565b60405180910390a15050505050505050610693610aa6565b50565b600260149054906101000a900460ff1681565b60056020528060005260406000206000915054906101000a900460ff1681565b6106d1610a57565b6000816000600281106106e7576106e66111e4565b5b60200201519050600082600160028110610704576107036111e4565b5b602002015190506007600082815260200190815260200160002060009054906101000a900460ff161561076c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107639061156b565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900460ff166107cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c3906115d7565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff1690506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168888886040518060600160405280898152602001888152602001878152506040516024016108539493929190611779565b6040516020818303038152906040526311479fea60e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108a59190611831565b6000604051808303816000865af19150503d80600081146108e2576040519150601f19603f3d011682016040523d82523d6000602084013e6108e7565b606091505b505090508061092b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092290611894565b60405180910390fd5b60016007600085815260200190815260200160002060006101000a81548160ff021916908315150217905550600033905060008173ffffffffffffffffffffffffffffffffffffffff16600354604051610984906118da565b60006040518083038185875af1925050503d80600081146109c1576040519150601f19603f3d011682016040523d82523d6000602084013e6109c6565b606091505b5050905080610a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a019061193b565b60405180910390fd5b7f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b653386604051610a3b92919061199c565b60405180910390a1505050505050610a51610aa6565b50505050565b600260005403610a9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9390611a11565b60405180910390fd5b6002600081905550565b6001600081905550565b604051806101400160405280600a90602082028036833780820191505090505090565b604051806101400160405280600a90602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b6000819050919050565b610b3a81610b27565b8114610b4557600080fd5b50565b600081359050610b5781610b31565b92915050565b600060208284031215610b7357610b72610b22565b5b6000610b8184828501610b48565b91505092915050565b60008115159050919050565b610b9f81610b8a565b82525050565b6000602082019050610bba6000830184610b96565b92915050565b610bc981610b27565b82525050565b6000602082019050610be46000830184610bc0565b92915050565b600060ff82169050919050565b610c0081610bea565b82525050565b6000602082019050610c1b6000830184610bf7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c6f82610c26565b810181811067ffffffffffffffff82111715610c8e57610c8d610c37565b5b80604052505050565b6000610ca1610b18565b9050610cad8282610c66565b919050565b600067ffffffffffffffff821115610ccd57610ccc610c37565b5b602082029050919050565b600080fd5b6000610cf0610ceb84610cb2565b610c97565b90508060208402830185811115610d0a57610d09610cd8565b5b835b81811015610d335780610d1f8882610b48565b845260208401935050602081019050610d0c565b5050509392505050565b600082601f830112610d5257610d51610c21565b5b6002610d5f848285610cdd565b91505092915050565b600067ffffffffffffffff821115610d8357610d82610c37565b5b602082029050919050565b6000610da1610d9c84610d68565b610c97565b90508060408402830185811115610dbb57610dba610cd8565b5b835b81811015610de45780610dd08882610d3d565b845260208401935050604081019050610dbd565b5050509392505050565b600082601f830112610e0357610e02610c21565b5b6002610e10848285610d8e565b91505092915050565b6000806000806101408587031215610e3457610e33610b22565b5b6000610e4287828801610d3d565b9450506040610e5387828801610dee565b93505060c0610e6487828801610d3d565b925050610100610e7687828801610d3d565b91505092959194509250565b600082825260208201905092915050565b7f696e63726561746573652074686520616d6f756e74206f662065746800000000600082015250565b6000610ec9601c83610e82565b9150610ed482610e93565b602082019050919050565b60006020820190508181036000830152610ef881610ebc565b9050919050565b7f6578697374696e672d636f6d6d69746d656e7400000000000000000000000000600082015250565b6000610f35601383610e82565b9150610f4082610eff565b602082019050919050565b60006020820190508181036000830152610f6481610f28565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115610ff157808604811115610fcd57610fcc610f6b565b5b6001851615610fdc5780820291505b8081029050610fea85610f9a565b9450610fb1565b94509492505050565b60008261100a57600190506110c6565b8161101857600090506110c6565b816001811461102e576002811461103857611067565b60019150506110c6565b60ff84111561104a57611049610f6b565b5b8360020a91508482111561106157611060610f6b565b5b506110c6565b5060208310610133831016604e8410600b841016171561109c5782820a90508381111561109757611096610f6b565b5b6110c6565b6110a98484846001610fa7565b925090508184048111156110c0576110bf610f6b565b5b81810290505b9392505050565b60006110d882610b27565b91506110e383610bea565b92506111107fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610ffa565b905092915050565b7f747265652d66756c6c0000000000000000000000000000000000000000000000600082015250565b600061114e600983610e82565b915061115982611118565b602082019050919050565b6000602082019050818103600083015261117d81611141565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111be82610b27565b91506111c983610b27565b9250826111d9576111d8611184565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060029050919050565b600081905092915050565b6000819050919050565b61123c81610b27565b82525050565b600061124e8383611233565b60208301905092915050565b6000602082019050919050565b61127081611213565b61127a818461121e565b925061128582611229565b8060005b838110156112b657815161129d8782611242565b96506112a88361125a565b925050600181019050611289565b505050505050565b60006060820190506112d36000830185611267565b6112e06040830184610bc0565b9392505050565b6000815190506112f681610b31565b92915050565b60006020828403121561131257611311610b22565b5b6000611320848285016112e7565b91505092915050565b600061133482610b27565b915061133f83610b27565b92508261134f5761134e611184565b5b828204905092915050565b600061136582610bea565b915060ff820361137857611377610f6b565b5b600182019050919050565b600061138e82610b27565b915061139983610b27565b92508282019050808211156113b1576113b0610f6b565b5b92915050565b6000600a9050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b6113ed816113b7565b6113f781846113c2565b9250611402826113cd565b8060005b8381101561143357815161141a8782611242565b9650611425836113d7565b925050600181019050611406565b505050505050565b6000600a9050919050565b600081905092915050565b6000819050919050565b61146481610bea565b82525050565b6000611476838361145b565b60208301905092915050565b6000602082019050919050565b6114988161143b565b6114a28184611446565b92506114ad82611451565b8060005b838110156114de5781516114c5878261146a565b96506114d083611482565b9250506001810190506114b1565b505050505050565b60006102a0820190506114fc6000830186610bc0565b61150960208301856113e4565b61151761016083018461148f565b949350505050565b7f616c72656164792d7370656e7400000000000000000000000000000000000000600082015250565b6000611555600d83610e82565b91506115608261151f565b602082019050919050565b6000602082019050818103600083015261158481611548565b9050919050565b7f6e6f742d726f6f74000000000000000000000000000000000000000000000000600082015250565b60006115c1600883610e82565b91506115cc8261158b565b602082019050919050565b600060208201905081810360008301526115f0816115b4565b9050919050565b600060029050919050565b600081905092915050565b6000819050919050565b600081905092915050565b61162b81611213565b6116358184611617565b925061164082611229565b8060005b838110156116715781516116588782611242565b96506116638361125a565b925050600181019050611644565b505050505050565b60006116858383611622565b60408301905092915050565b6000602082019050919050565b6116a7816115f7565b6116b18184611602565b92506116bc8261160d565b8060005b838110156116ed5781516116d48782611679565b96506116df83611691565b9250506001810190506116c0565b505050505050565b600060039050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b61172b816116f5565b6117358184611700565b92506117408261170b565b8060005b838110156117715781516117588782611242565b965061176383611715565b925050600181019050611744565b505050505050565b60006101608201905061178f6000830187611267565b61179c604083018661169e565b6117a960c0830185611267565b6117b7610100830184611722565b95945050505050565b600081519050919050565b600081905092915050565b60005b838110156117f45780820151818401526020810190506117d9565b60008484015250505050565b600061180b826117c0565b61181581856117cb565b93506118258185602086016117d6565b80840191505092915050565b600061183d8284611800565b915081905092915050565b7f696e76616c69642d70726f6f6600000000000000000000000000000000000000600082015250565b600061187e600d83610e82565b915061188982611848565b602082019050919050565b600060208201905081810360008301526118ad81611871565b9050919050565b50565b60006118c46000836117cb565b91506118cf826118b4565b600082019050919050565b60006118e5826118b7565b9150819050919050565b7f7061796d656e742d6661696c6564000000000000000000000000000000000000600082015250565b6000611925600e83610e82565b9150611930826118ef565b602082019050919050565b6000602082019050818103600083015261195481611918565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119868261195b565b9050919050565b6119968161197b565b82525050565b60006040820190506119b1600083018561198d565b6119be6020830184610bc0565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006119fb601f83610e82565b9150611a06826119c5565b602082019050919050565b60006020820190508181036000830152611a2a816119ee565b905091905056fea2646970667358221220b4471d4c8088f31901caaf4062e963bd728a1b6b05179ea76843045243e2ce4764736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063b6b55f251161004e578063b6b55f2514610150578063b8e795641461016c578063c2b40ae414610197578063c78784d7146101d45761007b565b80631f79a1e91461008057806345e0523f146100bd57806349ce8997146100e85780638bca6d1614610125575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610b5d565b6101f0565b6040516100b49190610ba5565b60405180910390f35b3480156100c957600080fd5b506100d2610210565b6040516100df9190610bcf565b60405180910390f35b3480156100f457600080fd5b5061010f600480360381019061010a9190610b5d565b610216565b60405161011c9190610ba5565b60405180910390f35b34801561013157600080fd5b5061013a610236565b6040516101479190610bcf565b60405180910390f35b61016a60048036038101906101659190610b5d565b61023c565b005b34801561017857600080fd5b50610181610696565b60405161018e9190610c06565b60405180910390f35b3480156101a357600080fd5b506101be60048036038101906101b99190610b5d565b6106a9565b6040516101cb9190610ba5565b60405180910390f35b6101ee60048036038101906101e99190610e19565b6106c9565b005b60076020528060005260406000206000915054906101000a900460ff1681565b60045481565b60086020528060005260406000206000915054906101000a900460ff1681565b60035481565b610244610a57565b6003543414610288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027f90610edf565b60405180910390fd5b6008600082815260200190815260200160002060009054906101000a900460ff16156102e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e090610f4b565b60405180910390fd5b600260149054906101000a900460ff16600261030591906110cd565b60045410610348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033f90611164565b60405180910390fd5b6000610352610ab0565b61035a610ad3565b600060045490506000859050600080610371610af6565b60005b600260149054906101000a900460ff1660ff168160ff1610156105d25760006002876103a091906111b3565b036104295784935060098160ff16600a81106103bf576103be6111e4565b5b0154925060098160ff16600a81106103da576103d96111e4565b5b0154888260ff16600a81106103f2576103f16111e4565b5b6020020181815250506000878260ff16600a8110610413576104126111e4565b5b602002019060ff16908160ff16815250506104ab565b600660008260ff1660ff168152602001908152602001600020549350849250600660008260ff1660ff16815260200190815260200160002054888260ff16600a8110610478576104776111e4565b5b6020020181815250506001878260ff16600a8110610499576104986111e4565b5b602002019060ff16908160ff16815250505b84600660008360ff1660ff1681526020019081526020016000208190555083826000600281106104de576104dd6111e4565b5b60200201818152505082826001600281106104fc576104fb6111e4565b5b6020020181815250506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d622e5a4620249f0858e6040518463ffffffff1660e01b81526004016105689291906112be565b6020604051808303818786fa158015610585573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906105aa91906112fc565b90508095506002876105bc9190611329565b96505080806105ca9061135a565b915050610374565b508397506001600560008a815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600460008282546106159190611383565b925050819055506001600860008b815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe6ab8667cb740d6c65a4ad321c031eb42f6c5085d5753238d1b2e1e370c1348388888860405161067b939291906114e6565b60405180910390a15050505050505050610693610aa6565b50565b600260149054906101000a900460ff1681565b60056020528060005260406000206000915054906101000a900460ff1681565b6106d1610a57565b6000816000600281106106e7576106e66111e4565b5b60200201519050600082600160028110610704576107036111e4565b5b602002015190506007600082815260200190815260200160002060009054906101000a900460ff161561076c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107639061156b565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900460ff166107cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c3906115d7565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff1690506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168888886040518060600160405280898152602001888152602001878152506040516024016108539493929190611779565b6040516020818303038152906040526311479fea60e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108a59190611831565b6000604051808303816000865af19150503d80600081146108e2576040519150601f19603f3d011682016040523d82523d6000602084013e6108e7565b606091505b505090508061092b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092290611894565b60405180910390fd5b60016007600085815260200190815260200160002060006101000a81548160ff021916908315150217905550600033905060008173ffffffffffffffffffffffffffffffffffffffff16600354604051610984906118da565b60006040518083038185875af1925050503d80600081146109c1576040519150601f19603f3d011682016040523d82523d6000602084013e6109c6565b606091505b5050905080610a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a019061193b565b60405180910390fd5b7f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b653386604051610a3b92919061199c565b60405180910390a1505050505050610a51610aa6565b50505050565b600260005403610a9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9390611a11565b60405180910390fd5b6002600081905550565b6001600081905550565b604051806101400160405280600a90602082028036833780820191505090505090565b604051806101400160405280600a90602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b6000819050919050565b610b3a81610b27565b8114610b4557600080fd5b50565b600081359050610b5781610b31565b92915050565b600060208284031215610b7357610b72610b22565b5b6000610b8184828501610b48565b91505092915050565b60008115159050919050565b610b9f81610b8a565b82525050565b6000602082019050610bba6000830184610b96565b92915050565b610bc981610b27565b82525050565b6000602082019050610be46000830184610bc0565b92915050565b600060ff82169050919050565b610c0081610bea565b82525050565b6000602082019050610c1b6000830184610bf7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c6f82610c26565b810181811067ffffffffffffffff82111715610c8e57610c8d610c37565b5b80604052505050565b6000610ca1610b18565b9050610cad8282610c66565b919050565b600067ffffffffffffffff821115610ccd57610ccc610c37565b5b602082029050919050565b600080fd5b6000610cf0610ceb84610cb2565b610c97565b90508060208402830185811115610d0a57610d09610cd8565b5b835b81811015610d335780610d1f8882610b48565b845260208401935050602081019050610d0c565b5050509392505050565b600082601f830112610d5257610d51610c21565b5b6002610d5f848285610cdd565b91505092915050565b600067ffffffffffffffff821115610d8357610d82610c37565b5b602082029050919050565b6000610da1610d9c84610d68565b610c97565b90508060408402830185811115610dbb57610dba610cd8565b5b835b81811015610de45780610dd08882610d3d565b845260208401935050604081019050610dbd565b5050509392505050565b600082601f830112610e0357610e02610c21565b5b6002610e10848285610d8e565b91505092915050565b6000806000806101408587031215610e3457610e33610b22565b5b6000610e4287828801610d3d565b9450506040610e5387828801610dee565b93505060c0610e6487828801610d3d565b925050610100610e7687828801610d3d565b91505092959194509250565b600082825260208201905092915050565b7f696e63726561746573652074686520616d6f756e74206f662065746800000000600082015250565b6000610ec9601c83610e82565b9150610ed482610e93565b602082019050919050565b60006020820190508181036000830152610ef881610ebc565b9050919050565b7f6578697374696e672d636f6d6d69746d656e7400000000000000000000000000600082015250565b6000610f35601383610e82565b9150610f4082610eff565b602082019050919050565b60006020820190508181036000830152610f6481610f28565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115610ff157808604811115610fcd57610fcc610f6b565b5b6001851615610fdc5780820291505b8081029050610fea85610f9a565b9450610fb1565b94509492505050565b60008261100a57600190506110c6565b8161101857600090506110c6565b816001811461102e576002811461103857611067565b60019150506110c6565b60ff84111561104a57611049610f6b565b5b8360020a91508482111561106157611060610f6b565b5b506110c6565b5060208310610133831016604e8410600b841016171561109c5782820a90508381111561109757611096610f6b565b5b6110c6565b6110a98484846001610fa7565b925090508184048111156110c0576110bf610f6b565b5b81810290505b9392505050565b60006110d882610b27565b91506110e383610bea565b92506111107fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610ffa565b905092915050565b7f747265652d66756c6c0000000000000000000000000000000000000000000000600082015250565b600061114e600983610e82565b915061115982611118565b602082019050919050565b6000602082019050818103600083015261117d81611141565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111be82610b27565b91506111c983610b27565b9250826111d9576111d8611184565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060029050919050565b600081905092915050565b6000819050919050565b61123c81610b27565b82525050565b600061124e8383611233565b60208301905092915050565b6000602082019050919050565b61127081611213565b61127a818461121e565b925061128582611229565b8060005b838110156112b657815161129d8782611242565b96506112a88361125a565b925050600181019050611289565b505050505050565b60006060820190506112d36000830185611267565b6112e06040830184610bc0565b9392505050565b6000815190506112f681610b31565b92915050565b60006020828403121561131257611311610b22565b5b6000611320848285016112e7565b91505092915050565b600061133482610b27565b915061133f83610b27565b92508261134f5761134e611184565b5b828204905092915050565b600061136582610bea565b915060ff820361137857611377610f6b565b5b600182019050919050565b600061138e82610b27565b915061139983610b27565b92508282019050808211156113b1576113b0610f6b565b5b92915050565b6000600a9050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b6113ed816113b7565b6113f781846113c2565b9250611402826113cd565b8060005b8381101561143357815161141a8782611242565b9650611425836113d7565b925050600181019050611406565b505050505050565b6000600a9050919050565b600081905092915050565b6000819050919050565b61146481610bea565b82525050565b6000611476838361145b565b60208301905092915050565b6000602082019050919050565b6114988161143b565b6114a28184611446565b92506114ad82611451565b8060005b838110156114de5781516114c5878261146a565b96506114d083611482565b9250506001810190506114b1565b505050505050565b60006102a0820190506114fc6000830186610bc0565b61150960208301856113e4565b61151761016083018461148f565b949350505050565b7f616c72656164792d7370656e7400000000000000000000000000000000000000600082015250565b6000611555600d83610e82565b91506115608261151f565b602082019050919050565b6000602082019050818103600083015261158481611548565b9050919050565b7f6e6f742d726f6f74000000000000000000000000000000000000000000000000600082015250565b60006115c1600883610e82565b91506115cc8261158b565b602082019050919050565b600060208201905081810360008301526115f0816115b4565b9050919050565b600060029050919050565b600081905092915050565b6000819050919050565b600081905092915050565b61162b81611213565b6116358184611617565b925061164082611229565b8060005b838110156116715781516116588782611242565b96506116638361125a565b925050600181019050611644565b505050505050565b60006116858383611622565b60408301905092915050565b6000602082019050919050565b6116a7816115f7565b6116b18184611602565b92506116bc8261160d565b8060005b838110156116ed5781516116d48782611679565b96506116df83611691565b9250506001810190506116c0565b505050505050565b600060039050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b61172b816116f5565b6117358184611700565b92506117408261170b565b8060005b838110156117715781516117588782611242565b965061176383611715565b925050600181019050611744565b505050505050565b60006101608201905061178f6000830187611267565b61179c604083018661169e565b6117a960c0830185611267565b6117b7610100830184611722565b95945050505050565b600081519050919050565b600081905092915050565b60005b838110156117f45780820151818401526020810190506117d9565b60008484015250505050565b600061180b826117c0565b61181581856117cb565b93506118258185602086016117d6565b80840191505092915050565b600061183d8284611800565b915081905092915050565b7f696e76616c69642d70726f6f6600000000000000000000000000000000000000600082015250565b600061187e600d83610e82565b915061188982611848565b602082019050919050565b600060208201905081810360008301526118ad81611871565b9050919050565b50565b60006118c46000836117cb565b91506118cf826118b4565b600082019050919050565b60006118e5826118b7565b9150819050919050565b7f7061796d656e742d6661696c6564000000000000000000000000000000000000600082015250565b6000611925600e83610e82565b9150611930826118ef565b602082019050919050565b6000602082019050818103600083015261195481611918565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119868261195b565b9050919050565b6119968161197b565b82525050565b60006040820190506119b1600083018561198d565b6119be6020830184610bc0565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006119fb601f83610e82565b9150611a06826119c5565b602082019050919050565b60006020820190508181036000830152611a2a816119ee565b905091905056fea2646970667358221220b4471d4c8088f31901caaf4062e963bd728a1b6b05179ea76843045243e2ce4764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 210,
        "contract": "contracts/Tornado.sol:Tornado",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 295,
        "contract": "contracts/Tornado.sol:Tornado",
        "label": "hasher",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Hasher)199"
      },
      {
        "astId": 297,
        "contract": "contracts/Tornado.sol:Tornado",
        "label": "verifier",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 300,
        "contract": "contracts/Tornado.sol:Tornado",
        "label": "treeLevel",
        "offset": 20,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 303,
        "contract": "contracts/Tornado.sol:Tornado",
        "label": "denomination",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 306,
        "contract": "contracts/Tornado.sol:Tornado",
        "label": "nextLeafIdx",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 310,
        "contract": "contracts/Tornado.sol:Tornado",
        "label": "roots",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 314,
        "contract": "contracts/Tornado.sol:Tornado",
        "label": "lastLevelHash",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 318,
        "contract": "contracts/Tornado.sol:Tornado",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 322,
        "contract": "contracts/Tornado.sol:Tornado",
        "label": "commitments",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 337,
        "contract": "contracts/Tornado.sol:Tornado",
        "label": "levelDefaults",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)10_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Hasher)199": {
        "encoding": "inplace",
        "label": "contract Hasher",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}